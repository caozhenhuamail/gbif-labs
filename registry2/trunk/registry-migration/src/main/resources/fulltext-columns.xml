<!DOCTYPE etl SYSTEM "http://scriptella.javaforge.com/dtd/etl.dtd">
<etl>    
    <properties>
        <include href="conf.properties"/>
    </properties>
    <connection id="new-registry" url="${new.registry.url}" user="${new.registry.user}" password="${new.registry.pwd}">
      statement.separator=;
      statement.separator.singleline=true
    </connection>

  <!-- Adds all the search fulltext indexes and triggers.  Separate file to allow us to use multiple lines  -->
  <script connection-id="new-registry">
    <dialect name="postgresql">

    ALTER TABLE node ADD COLUMN fulltext_search tsvector;
    CREATE INDEX node_fulltext_search_idx ON node USING gin(fulltext_search);

    CREATE OR REPLACE FUNCTION node_change_trigger()
      RETURNS trigger AS
      $$
        BEGIN
          NEW.fulltext_search := 
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.title,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.type AS TEXT),'')) || 
            TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.participation_status AS TEXT),'')) || 
            TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.gbif_region AS TEXT),'')) || 
            TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.continent AS TEXT),'')) || 
            TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.country AS TEXT),''));
          RETURN NEW;
        END
      $$ LANGUAGE plpgsql;  
    
    CREATE TRIGGER node_fulltext_update 
      BEFORE INSERT OR UPDATE ON node 
      FOR EACH ROW EXECUTE PROCEDURE node_change_trigger(); 
      UPDATE node SET fulltext_search = NULL;      
    
    ALTER TABLE dataset ADD COLUMN fulltext_search tsvector;
    CREATE INDEX dataset_fulltext_search_idx ON dataset USING gin(fulltext_search);

    CREATE OR REPLACE FUNCTION dataset_change_trigger()
      RETURNS trigger AS
      $$
        BEGIN
          NEW.fulltext_search := 
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.title,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.type AS TEXT),'')) || 
            TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.sub_type AS TEXT),'')) || 
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.alias,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.abbreviation,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.description,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.homepage,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.citation,''));
          RETURN NEW;
        END
      $$ LANGUAGE plpgsql;  
    
    CREATE TRIGGER dataset_fulltext_update 
      BEFORE INSERT OR UPDATE ON dataset 
      FOR EACH ROW EXECUTE PROCEDURE dataset_change_trigger(); 
    UPDATE dataset SET fulltext_search = NULL;      

    ALTER TABLE installation ADD COLUMN fulltext_search tsvector;
    CREATE INDEX installation_fulltext_search_idx ON installation USING gin(fulltext_search);

    CREATE OR REPLACE FUNCTION installation_change_trigger()
      RETURNS trigger AS
      $$
        BEGIN
          NEW.fulltext_search := 
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.title,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.type AS TEXT),'')) || 
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.description,''));
          RETURN NEW;
        END
      $$ LANGUAGE plpgsql;  
    
    CREATE TRIGGER installation_fulltext_update 
      BEFORE INSERT OR UPDATE ON installation 
      FOR EACH ROW EXECUTE PROCEDURE installation_change_trigger(); 
    UPDATE installation SET fulltext_search = NULL;      

    ALTER TABLE organization ADD COLUMN fulltext_search tsvector;
    CREATE INDEX organization_fulltext_search_idx ON organization USING gin(fulltext_search);

    CREATE OR REPLACE FUNCTION organization_change_trigger()
      RETURNS trigger AS
      $$
        BEGIN
          NEW.fulltext_search := 
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.title,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.abbreviation,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.description,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.language,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.email,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.phone,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.homepage,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.logo_url,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.address,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.city,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.province,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.country,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.postal_code,''));
          RETURN NEW;
        END
      $$ LANGUAGE plpgsql;  
    
    CREATE TRIGGER organization_fulltext_update 
      BEFORE INSERT OR UPDATE ON organization 
      FOR EACH ROW EXECUTE PROCEDURE organization_change_trigger(); 
    UPDATE organization SET fulltext_search = NULL;      

    ALTER TABLE network ADD COLUMN fulltext_search tsvector;
    CREATE INDEX network_fulltext_search_idx ON network USING gin(fulltext_search);

    CREATE OR REPLACE FUNCTION network_change_trigger()
      RETURNS trigger AS
      $$
        BEGIN
          NEW.fulltext_search := 
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.title,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.description,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.language,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.email,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.phone,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.homepage,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.logo_url,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.address,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.city,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.province,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.country,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.postal_code,''));
          RETURN NEW;
        END
      $$ LANGUAGE plpgsql;  
    
    CREATE TRIGGER network_fulltext_update 
      BEFORE INSERT OR UPDATE ON network 
      FOR EACH ROW EXECUTE PROCEDURE network_change_trigger(); 
    UPDATE network SET fulltext_search = NULL;      

    ALTER TABLE contact ADD COLUMN fulltext_search tsvector;
    CREATE INDEX contact_fulltext_search_idx ON contact USING gin(fulltext_search);

    CREATE OR REPLACE FUNCTION contact_change_trigger()
      RETURNS trigger AS
      $$
        BEGIN
          NEW.fulltext_search := 
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.name,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.description,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.position,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.email,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.phone,'')) || 
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.organization,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.address,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.city,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.province,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.country,'')) ||
            TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.postal_code,''));
          RETURN NEW;
        END
      $$ LANGUAGE plpgsql;  
    
    CREATE TRIGGER contact_fulltext_update 
      BEFORE INSERT OR UPDATE ON contact 
      FOR EACH ROW EXECUTE PROCEDURE contact_change_trigger(); 
    UPDATE contact SET fulltext_search = NULL;    

    </dialect>
  </script>

</etl>