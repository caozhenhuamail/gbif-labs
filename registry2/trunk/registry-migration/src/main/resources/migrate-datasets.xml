<!DOCTYPE etl SYSTEM "http://scriptella.javaforge.com/dtd/etl.dtd">
<etl>    
    <properties>
        <include href="conf.properties"/>
    </properties>
    <connection id="old-registry" url="${old.registry.url}" user="${old.registry.user}" password="${old.registry.pwd}"/>
    <connection id="new-registry" url="${new.registry.url}" user="${new.registry.user}" password="${new.registry.pwd}"/>        

    <query id="datasets" connection-id="old-registry">
        SELECT a.uuid AS uuid_key,
          a.uuid AS parent_dataset_key,
          aHosting.uuid AS installation_key,
          aOwning.uuid AS owning_organization_key,
          CASE a.category WHEN 18000 THEN 'CHECKLIST' WHEN 18010 THEN 'OCCURRENCE' WHEN 18020 THEN 'METADATA' ELSE 'OCCURRENCE' END AS type,
          a.name AS title,
          a.alias AS alias,
          CASE WHEN char_length(trim(a.description))&lt;10 THEN null ELSE a.description END AS description,
          CASE WHEN a.language IS NULL THEN 'en' WHEN char_length(trim(a.language))!=2 THEN 'en' ELSE a.language END AS language,
          CASE WHEN trim(a.homepage) NOT REGEXP '^[a-z0-9]{2,}://|^[a-z0-9]{2,}\\.' THEN IF(a.homepage REGEXP '`', REPLACE(a.homepage, '`',''), NULL ) 
            WHEN trim(a.homepage) REGEXP '[[:space:]]' THEN REPLACE(a.homepage, ' ','')
			ELSE trim(a.homepage) END AS homepage,
          a.logoURL as logo_url,          
          CASE WHEN char_length(trim(ep.citation_text))&lt;10 THEN null ELSE ep.citation_text END AS citation,
          CASE WHEN char_length(trim(ep.citation_identifier))&lt;1 THEN null ELSE ep.citation_identifier END AS citation_identifier,
          CASE WHEN char_length(trim(ep.rights))&lt;1 THEN null ELSE ep.rights END AS rights,
          CASE WHEN a.admin_override IS NULL THEN FALSE ELSE a.admin_override END AS locked_for_auto_update,
          COALESCE(a.created, a.modified, now()) AS created,
          COALESCE(a.modified, a.created, now()) AS modified,
          a.deleted,
          'ADMIN' AS created_by,
          'ADMIN' AS modified_by
        FROM agent a
        JOIN agent_relation arOwning ON a.id=arOwning.to_agent_id
        JOIN agent_relation arHosting ON a.id=arHosting.to_agent_id
        JOIN agent aOwning ON aOwning.id=arOwning.from_agent_id
        JOIN agent aHosting ON aHosting.id=arHosting.from_agent_id
        LEFT JOIN extended_property ep ON a.id=ep.agent_id
        WHERE a.type=14020 
        AND arOwning.relation_type_id=15010   
        AND arHosting.relation_type_id=15020 
        AND aOwning.type=14010
        AND aHosting.type=14100
        AND aHosting.name NOT IN('IPT_TEST', 'Test IPT','Test IPT','Test IPT','Test IPT','TEST IPT FROM K','TEST IPT FROM K #3', 'Test 2.0.2 Kyle', 'TEST IPT 204 Pre-release (edited 5)')
        <!--  
        
          Prefer non deleted records, and newest installation first.
          The joins bring back historical owners (e.g. a dataset once was owned by someone, but now it is moved) and also datasets served by multiple installations.
          9d392768-27fc-11e2-85e3-00145eb45e9a for example is served by a DiGIR 5feb96ea-f762-11e1-a439-00145eb45e9a and an IPT 9afa1395-6e93-4848-a42d-bce896f5195e - we prefer the IPT.          
          The first one wins in the insert below
        -->
        ORDER BY arOwning.deleted, arHosting.created DESC


        <!-- In here we have some hardcoded values, because they are NOT NULL and these fields don't exist in the live registry -->
        <script connection-id="new-registry">
            INSERT INTO dataset(key,installation_key,owning_organization_key,
              type,title,alias,description,language,homepage,logo_url,citation,citation_identifier,
              rights,locked_for_auto_update,created,modified,deleted,created_by,modified_by)
            SELECT ?uuid_key::uuid,?installation_key::uuid,?owning_organization_key::uuid,
              ?type::enum_dataset_type,?title,?alias,?description,UPPER(?language),?homepage,?logo_url,?citation,?citation_identifier,
              ?rights,?locked_for_auto_update::boolean,?created,?modified,?deleted,?created_by,?modified_by
            WHERE EXISTS(SELECT * FROM organization WHERE key=?owning_organization_key::uuid) AND
            NOT EXISTS(SELECT * FROM dataset WHERE key=?uuid_key::uuid)
        </script>
    </query>
</etl>