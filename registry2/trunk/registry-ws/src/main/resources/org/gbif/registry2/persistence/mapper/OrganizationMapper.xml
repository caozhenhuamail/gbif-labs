<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.registry2.persistence.mapper.OrganizationMapper">
  
  <!-- Auto-mapping and eager loading of sub resources  -->
  <resultMap id="ORGANIZATION_MAP" type="Organization" autoMapping="true">
    <id property="key" column="key"/>
    <collection property="contacts" column="key" select="listContacts"/>
    <collection property="endpoints" column="key" select="listEndpoints"/>
    <collection property="machineTags" column="key" select="listMachineTags"/>
    <collection property="tags" column="key" select="listTags"/>
    <collection property="identifiers" column="key" select="listIdentifiers"/>
    <collection property="comments" column="key" select="listComments"/>
  </resultMap>

  <sql id="WRITABLE_ORGANIZATION_FIELDS">
    key,endorsing_node_key,endorsement_approved,password,title,abbreviation,description,language,email,
    phone,homepage,logo_url,address,city,province,country,postal_code,latitude,longitude,created,created_by,
    modified,modified_by    
  </sql>
  
  <sql id="ORGANIZATION_FIELDS">
    o.key,o.endorsing_node_key,o.endorsement_approved,o.password,o.title,o.abbreviation,o.description,o.language,o.email,
    o.phone,o.homepage,o.logo_url,o.address,o.city,o.province,o.country,o.postal_code,o.latitude,o.longitude,
    o.created,o.created_by,o.modified,o.modified_by,o.deleted    
  </sql>
  
  <!-- 
    key, created and deleted are never changed
   -->
  <sql id="ORGANIZATION_UPDATE">
    endorsing_node_key = #{endorsingNodeKey,jdbcType=OTHER},
    endorsement_approved = #{endorsementApproved,jdbcType=BOOLEAN},
    password = #{password,jdbcType=VARCHAR},
    title = #{title,jdbcType=VARCHAR},
    abbreviation = #{abbreviation,jdbcType=CHAR},
    description = #{description,jdbcType=VARCHAR},
    language = #{language,jdbcType=CHAR},
    email = #{email,jdbcType=VARCHAR},
    phone = #{phone,jdbcType=VARCHAR},
    homepage = #{homepage,jdbcType=VARCHAR},
    logo_url = #{logoUrl,jdbcType=VARCHAR},
    address = #{address,jdbcType=VARCHAR},
    city = #{city,jdbcType=VARCHAR},
    province = #{province,jdbcType=VARCHAR},
    country = #{country,jdbcType=CHAR},
    postal_code = #{postalCode,jdbcType=VARCHAR},
    latitude = #{latitude,jdbcType=DOUBLE},
    longitude = #{longitude,jdbcType=DOUBLE},
    modified = now(),    
    modified_by = #{modifiedBy}
  </sql>
  
  <sql id="WRITABLE_ORGANIZATION_FIELD_TYPES">
    #{key,jdbcType=OTHER},
    #{endorsingNodeKey,jdbcType=OTHER},
    #{endorsementApproved,jdbcType=BOOLEAN},
    #{password,jdbcType=VARCHAR},
    #{title,jdbcType=VARCHAR},
    #{abbreviation,jdbcType=CHAR},
    #{description,jdbcType=VARCHAR},
    #{language,jdbcType=CHAR},
    #{email,jdbcType=VARCHAR},
    #{phone,jdbcType=VARCHAR},
    #{homepage,jdbcType=VARCHAR},
    #{logoUrl,jdbcType=VARCHAR},
    #{address,jdbcType=VARCHAR},
    #{city,jdbcType=VARCHAR},
    #{province,jdbcType=VARCHAR},
    #{country,jdbcType=CHAR},
    #{postalCode,jdbcType=VARCHAR},
    #{latitude,jdbcType=DOUBLE},
    #{longitude,jdbcType=DOUBLE},
    now(), <!-- created -->    
    #{createdBy},
    now(), <!-- modified -->    
    #{modifiedBy}
  </sql>
  
  <!--  Note: you can get entities which are deleted -->
  <select id="get" resultMap="ORGANIZATION_MAP">
    SELECT <include refid="ORGANIZATION_FIELDS"/>
    FROM organization o
    WHERE o.key = #{key,jdbcType=OTHER}
  </select>  
  
  <insert id="create" parameterType="Organization">
    INSERT INTO organization(<include refid="WRITABLE_ORGANIZATION_FIELDS"/>)
    VALUES(<include refid="WRITABLE_ORGANIZATION_FIELD_TYPES"/>)
  </insert>  
  
  <!-- For safety, deleted entities are never modified -->
  <update id="update" parameterType="Organization">
    UPDATE organization
    SET <include refid="ORGANIZATION_UPDATE"/>
    WHERE key = #{key,jdbcType=OTHER} AND deleted IS NULL
  </update>  
  
  <!-- For safety, should it be already deleted nothing is done -->
  <update id="delete">
    UPDATE organization 
    SET deleted = now()
    WHERE key = #{key,jdbcType=OTHER} AND deleted IS NULL
  </update>  
  
  <!-- Append safe ordering, omitting deleted entities -->
  <select id="list" resultType="Organization"  resultMap="ORGANIZATION_MAP" parameterType="Pageable">
    SELECT <include refid="ORGANIZATION_FIELDS"/>
    FROM organization o
    WHERE o.deleted IS NULL
    ORDER BY o.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>  
  
  <select id="count" resultType="Integer">
    SELECT COUNT(*)
    FROM organization 
    WHERE deleted IS NULL
  </select>  

  <!-- TAGS -->
  <insert id="addTag">
    INSERT INTO organization_tag(organization_key,tag_key)
    VALUES(
     #{targetEntityKey,jdbcType=OTHER},
     #{tagKey,jdbcType=INTEGER}
    )
  </insert>
  
  <select id="listTags" resultType="Tag">
    SELECT <include refid="org.gbif.registry2.persistence.mapper.TagMapper.TAG_FIELDS"/>
    FROM tag INNER JOIN organization_tag ON tag_key = key
    WHERE organization_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created
  </select>
  
  <!-- Joined delete of tag to trigger cascade delete of the join table --> 
  <delete id="deleteTag">
    DELETE FROM tag USING organization_tag 
    WHERE
      tag_key = tag.key AND 
      organization_key = #{targetEntityKey,jdbcType=OTHER} AND tag_key = #{tagKey,jdbcType=INTEGER}
  </delete>
  
  <!-- CONTACTS -->
  <insert id="addContact">
    INSERT INTO organization_contact(organization_key,contact_key, type, is_primary)
    VALUES(
     #{targetEntityKey,jdbcType=OTHER},
     #{contactKey,jdbcType=INTEGER},
     #{type,jdbcType=OTHER},
     #{isPrimary,jdbcType=BOOLEAN}
    )
  </insert>
  
  <select id="listContacts" resultType="Contact">
    SELECT <include refid="org.gbif.registry2.persistence.mapper.ContactMapper.CONTACT_FIELDS"/>
    FROM contact INNER JOIN organization_contact ON contact_key = key
    WHERE organization_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created
  </select>
  
  <!-- Joined delete of contact to trigger cascade delete of the join table --> 
  <delete id="deleteContact">
    DELETE FROM contact USING organization_contact 
    WHERE
      contact_key = contact.key AND 
      organization_key = #{targetEntityKey,jdbcType=OTHER} AND contact_key = #{contactKey,jdbcType=INTEGER}
  </delete>  
  
  <!-- ENDPOINTS -->
  <insert id="addEndpoint">
    INSERT INTO organization_endpoint(organization_key,endpoint_key)
    VALUES(
     #{targetEntityKey,jdbcType=OTHER},
     #{endpointKey,jdbcType=INTEGER}
    )
  </insert>
  
  <select id="listEndpoints" resultType="Endpoint">
    SELECT <include refid="org.gbif.registry2.persistence.mapper.EndpointMapper.ENDPOINT_FIELDS"/>
    FROM endpoint INNER JOIN organization_endpoint ON endpoint_key = key
    WHERE organization_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created
  </select>
  
  <!-- Joined delete of endpoint to trigger cascade delete of the join table --> 
  <delete id="deleteEndpoint">
    DELETE FROM endpoint USING organization_endpoint
    WHERE
      endpoint_key = endpoint.key AND 
      organization_key = #{targetEntityKey,jdbcType=OTHER} AND endpoint_key = #{endpointKey,jdbcType=INTEGER}
  </delete>    
  
  <!-- IDENTIFIERS -->
  <insert id="addIdentifier">
    INSERT INTO organization_identifier(organization_key,identifier_key)
    VALUES(
     #{targetEntityKey,jdbcType=OTHER},
     #{identifierKey,jdbcType=INTEGER}
    )
  </insert>
  
  <select id="listIdentifiers" resultType="Identifier">
    SELECT <include refid="org.gbif.registry2.persistence.mapper.IdentifierMapper.IDENTIFIER_FIELDS"/>
    FROM identifier INNER JOIN organization_identifier ON identifier_key = key
    WHERE organization_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created
  </select>
  
  <!-- Joined delete of identifier to trigger cascade delete of the join table --> 
  <delete id="deleteIdentifier">
    DELETE FROM identifier USING organization_identifier
    WHERE
      identifier_key = identifier.key AND 
      organization_key = #{targetEntityKey,jdbcType=OTHER} AND identifier_key = #{identifierKey,jdbcType=INTEGER}
  </delete>    
  
  <!-- MACHINE TAGS -->
  <insert id="addMachineTag">
    INSERT INTO organization_machine_tag(organization_key,machine_tag_key)
    VALUES(
     #{targetEntityKey,jdbcType=OTHER},
     #{machineTagKey,jdbcType=INTEGER}
    )
  </insert>
  
  <select id="listMachineTags" resultType="MachineTag">
    SELECT <include refid="org.gbif.registry2.persistence.mapper.MachineTagMapper.MACHINETAG_FIELDS"/>
    FROM machine_tag INNER JOIN organization_machine_tag ON machine_tag_key = key
    WHERE organization_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY namespace
  </select>
  
  <!-- Joined delete of machine_tag to trigger cascade delete of the join table --> 
  <delete id="deleteMachineTag">
    DELETE FROM machine_tag USING organization_machine_tag 
    WHERE
      machine_tag_key = machine_tag.key AND 
      organization_key = #{targetEntityKey,jdbcType=OTHER} AND machine_tag_key = #{machineTagKey,jdbcType=INTEGER}
  </delete>  
  
  <!-- COMMENTS -->
  <insert id="addComment">
    INSERT INTO organization_comment(organization_key,comment_key)
    VALUES(
     #{targetEntityKey,jdbcType=OTHER},
     #{commentKey,jdbcType=INTEGER}
    )
  </insert>
  
  <select id="listComments" resultType="Comment">
    SELECT <include refid="org.gbif.registry2.persistence.mapper.CommentMapper.COMMENT_FIELDS"/>
    FROM comment INNER JOIN organization_comment ON comment_key = key
    WHERE organization_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created
  </select>
  
  <!-- Joined delete of comment to trigger cascade delete of the join table --> 
  <delete id="deleteComment">
    DELETE FROM comment USING organization_comment
    WHERE
      comment_key = comment.key AND 
      organization_key = #{targetEntityKey,jdbcType=OTHER} AND comment_key = #{commentKey,jdbcType=INTEGER}
  </delete>  
  
  <!-- Append safe ordering, omitting deleted entities -->
  <select id="organizationsEndorsedBy" resultMap="ORGANIZATION_MAP" parameterType="Pageable">
    SELECT <include refid="ORGANIZATION_FIELDS"/>
    FROM organization o
    INNER JOIN node n ON o.endorsing_node_key = n.key 
    WHERE o.deleted IS NULL AND n.deleted IS NULL AND n.key = #{nodeKey,jdbcType=OTHER} AND o.endorsement_approved = true 
    ORDER BY o.created
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>  
  
  <!-- Append safe ordering, omitting deleted entities -->
  <select id="pendingEndorsements" resultMap="ORGANIZATION_MAP" parameterType="Pageable">
    SELECT <include refid="ORGANIZATION_FIELDS"/>
    FROM organization o
    WHERE o.deleted IS NULL AND o.endorsement_approved = false 
    ORDER BY o.created
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>  
</mapper>