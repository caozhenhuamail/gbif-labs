/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.cube.gmap.density.backfill.io;  
@SuppressWarnings("all")
public class TileKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TileKey\",\"namespace\":\"org.gbif.cube.gmap.density.backfill.io\",\"fields\":[{\"name\":\"x\",\"type\":\"int\"},{\"name\":\"y\",\"type\":\"int\"},{\"name\":\"z\",\"type\":\"int\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TileType\",\"symbols\":[\"TAXON\",\"DATASET\"]}}]}");
  @Deprecated public int x;
  @Deprecated public int y;
  @Deprecated public int z;
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public org.gbif.cube.gmap.density.backfill.io.TileType type;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return x;
    case 1: return y;
    case 2: return z;
    case 3: return id;
    case 4: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: x = (java.lang.Integer)value$; break;
    case 1: y = (java.lang.Integer)value$; break;
    case 2: z = (java.lang.Integer)value$; break;
    case 3: id = (java.lang.CharSequence)value$; break;
    case 4: type = (org.gbif.cube.gmap.density.backfill.io.TileType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'x' field.
   */
  public java.lang.Integer getX() {
    return x;
  }

  /**
   * Sets the value of the 'x' field.
   * @param value the value to set.
   */
  public void setX(java.lang.Integer value) {
    this.x = value;
  }

  /**
   * Gets the value of the 'y' field.
   */
  public java.lang.Integer getY() {
    return y;
  }

  /**
   * Sets the value of the 'y' field.
   * @param value the value to set.
   */
  public void setY(java.lang.Integer value) {
    this.y = value;
  }

  /**
   * Gets the value of the 'z' field.
   */
  public java.lang.Integer getZ() {
    return z;
  }

  /**
   * Sets the value of the 'z' field.
   * @param value the value to set.
   */
  public void setZ(java.lang.Integer value) {
    this.z = value;
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public org.gbif.cube.gmap.density.backfill.io.TileType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(org.gbif.cube.gmap.density.backfill.io.TileType value) {
    this.type = value;
  }

  /** Creates a new TileKey RecordBuilder */
  public static org.gbif.cube.gmap.density.backfill.io.TileKey.Builder newBuilder() {
    return new org.gbif.cube.gmap.density.backfill.io.TileKey.Builder();
  }
  
  /** Creates a new TileKey RecordBuilder by copying an existing Builder */
  public static org.gbif.cube.gmap.density.backfill.io.TileKey.Builder newBuilder(org.gbif.cube.gmap.density.backfill.io.TileKey.Builder other) {
    return new org.gbif.cube.gmap.density.backfill.io.TileKey.Builder(other);
  }
  
  /** Creates a new TileKey RecordBuilder by copying an existing TileKey instance */
  public static org.gbif.cube.gmap.density.backfill.io.TileKey.Builder newBuilder(org.gbif.cube.gmap.density.backfill.io.TileKey other) {
    return new org.gbif.cube.gmap.density.backfill.io.TileKey.Builder(other);
  }
  
  /**
   * RecordBuilder for TileKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TileKey>
    implements org.apache.avro.data.RecordBuilder<TileKey> {

    private int x;
    private int y;
    private int z;
    private java.lang.CharSequence id;
    private org.gbif.cube.gmap.density.backfill.io.TileType type;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.cube.gmap.density.backfill.io.TileKey.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.cube.gmap.density.backfill.io.TileKey.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing TileKey instance */
    private Builder(org.gbif.cube.gmap.density.backfill.io.TileKey other) {
            super(org.gbif.cube.gmap.density.backfill.io.TileKey.SCHEMA$);
      if (isValidValue(fields()[0], other.x)) {
        this.x = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.x);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.y)) {
        this.y = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.y);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.z)) {
        this.z = (java.lang.Integer) data().deepCopy(fields()[2].schema(), other.z);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = (org.gbif.cube.gmap.density.backfill.io.TileType) data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'x' field */
    public java.lang.Integer getX() {
      return x;
    }
    
    /** Sets the value of the 'x' field */
    public org.gbif.cube.gmap.density.backfill.io.TileKey.Builder setX(int value) {
      validate(fields()[0], value);
      this.x = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'x' field has been set */
    public boolean hasX() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'x' field */
    public org.gbif.cube.gmap.density.backfill.io.TileKey.Builder clearX() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'y' field */
    public java.lang.Integer getY() {
      return y;
    }
    
    /** Sets the value of the 'y' field */
    public org.gbif.cube.gmap.density.backfill.io.TileKey.Builder setY(int value) {
      validate(fields()[1], value);
      this.y = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'y' field has been set */
    public boolean hasY() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'y' field */
    public org.gbif.cube.gmap.density.backfill.io.TileKey.Builder clearY() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'z' field */
    public java.lang.Integer getZ() {
      return z;
    }
    
    /** Sets the value of the 'z' field */
    public org.gbif.cube.gmap.density.backfill.io.TileKey.Builder setZ(int value) {
      validate(fields()[2], value);
      this.z = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'z' field has been set */
    public boolean hasZ() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'z' field */
    public org.gbif.cube.gmap.density.backfill.io.TileKey.Builder clearZ() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.gbif.cube.gmap.density.backfill.io.TileKey.Builder setId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.id = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'id' field */
    public org.gbif.cube.gmap.density.backfill.io.TileKey.Builder clearId() {
      id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public org.gbif.cube.gmap.density.backfill.io.TileType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public org.gbif.cube.gmap.density.backfill.io.TileKey.Builder setType(org.gbif.cube.gmap.density.backfill.io.TileType value) {
      validate(fields()[4], value);
      this.type = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'type' field */
    public org.gbif.cube.gmap.density.backfill.io.TileKey.Builder clearType() {
      type = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public TileKey build() {
      try {
        TileKey record = new TileKey();
        record.x = fieldSetFlags()[0] ? this.x : (java.lang.Integer) defaultValue(fields()[0]);
        record.y = fieldSetFlags()[1] ? this.y : (java.lang.Integer) defaultValue(fields()[1]);
        record.z = fieldSetFlags()[2] ? this.z : (java.lang.Integer) defaultValue(fields()[2]);
        record.id = fieldSetFlags()[3] ? this.id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.type = fieldSetFlags()[4] ? this.type : (org.gbif.cube.gmap.density.backfill.io.TileType) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
