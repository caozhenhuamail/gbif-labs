/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.cube.gmap.density.backfill.io;  
@SuppressWarnings("all")
public class TileValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TileValue\",\"namespace\":\"org.gbif.cube.gmap.density.backfill.io\",\"fields\":[{\"name\":\"offsetX\",\"type\":\"int\"},{\"name\":\"offsetY\",\"type\":\"int\"},{\"name\":\"count\",\"type\":\"int\"}]}");
  @Deprecated public int offsetX;
  @Deprecated public int offsetY;
  @Deprecated public int count;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return offsetX;
    case 1: return offsetY;
    case 2: return count;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: offsetX = (java.lang.Integer)value$; break;
    case 1: offsetY = (java.lang.Integer)value$; break;
    case 2: count = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'offsetX' field.
   */
  public java.lang.Integer getOffsetX() {
    return offsetX;
  }

  /**
   * Sets the value of the 'offsetX' field.
   * @param value the value to set.
   */
  public void setOffsetX(java.lang.Integer value) {
    this.offsetX = value;
  }

  /**
   * Gets the value of the 'offsetY' field.
   */
  public java.lang.Integer getOffsetY() {
    return offsetY;
  }

  /**
   * Sets the value of the 'offsetY' field.
   * @param value the value to set.
   */
  public void setOffsetY(java.lang.Integer value) {
    this.offsetY = value;
  }

  /**
   * Gets the value of the 'count' field.
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Integer value) {
    this.count = value;
  }

  /** Creates a new TileValue RecordBuilder */
  public static org.gbif.cube.gmap.density.backfill.io.TileValue.Builder newBuilder() {
    return new org.gbif.cube.gmap.density.backfill.io.TileValue.Builder();
  }
  
  /** Creates a new TileValue RecordBuilder by copying an existing Builder */
  public static org.gbif.cube.gmap.density.backfill.io.TileValue.Builder newBuilder(org.gbif.cube.gmap.density.backfill.io.TileValue.Builder other) {
    return new org.gbif.cube.gmap.density.backfill.io.TileValue.Builder(other);
  }
  
  /** Creates a new TileValue RecordBuilder by copying an existing TileValue instance */
  public static org.gbif.cube.gmap.density.backfill.io.TileValue.Builder newBuilder(org.gbif.cube.gmap.density.backfill.io.TileValue other) {
    return new org.gbif.cube.gmap.density.backfill.io.TileValue.Builder(other);
  }
  
  /**
   * RecordBuilder for TileValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TileValue>
    implements org.apache.avro.data.RecordBuilder<TileValue> {

    private int offsetX;
    private int offsetY;
    private int count;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.cube.gmap.density.backfill.io.TileValue.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.cube.gmap.density.backfill.io.TileValue.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing TileValue instance */
    private Builder(org.gbif.cube.gmap.density.backfill.io.TileValue other) {
            super(org.gbif.cube.gmap.density.backfill.io.TileValue.SCHEMA$);
      if (isValidValue(fields()[0], other.offsetX)) {
        this.offsetX = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.offsetX);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.offsetY)) {
        this.offsetY = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.offsetY);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = (java.lang.Integer) data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'offsetX' field */
    public java.lang.Integer getOffsetX() {
      return offsetX;
    }
    
    /** Sets the value of the 'offsetX' field */
    public org.gbif.cube.gmap.density.backfill.io.TileValue.Builder setOffsetX(int value) {
      validate(fields()[0], value);
      this.offsetX = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'offsetX' field has been set */
    public boolean hasOffsetX() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'offsetX' field */
    public org.gbif.cube.gmap.density.backfill.io.TileValue.Builder clearOffsetX() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'offsetY' field */
    public java.lang.Integer getOffsetY() {
      return offsetY;
    }
    
    /** Sets the value of the 'offsetY' field */
    public org.gbif.cube.gmap.density.backfill.io.TileValue.Builder setOffsetY(int value) {
      validate(fields()[1], value);
      this.offsetY = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'offsetY' field has been set */
    public boolean hasOffsetY() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'offsetY' field */
    public org.gbif.cube.gmap.density.backfill.io.TileValue.Builder clearOffsetY() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'count' field */
    public java.lang.Integer getCount() {
      return count;
    }
    
    /** Sets the value of the 'count' field */
    public org.gbif.cube.gmap.density.backfill.io.TileValue.Builder setCount(int value) {
      validate(fields()[2], value);
      this.count = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'count' field has been set */
    public boolean hasCount() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'count' field */
    public org.gbif.cube.gmap.density.backfill.io.TileValue.Builder clearCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public TileValue build() {
      try {
        TileValue record = new TileValue();
        record.offsetX = fieldSetFlags()[0] ? this.offsetX : (java.lang.Integer) defaultValue(fields()[0]);
        record.offsetY = fieldSetFlags()[1] ? this.offsetY : (java.lang.Integer) defaultValue(fields()[1]);
        record.count = fieldSetFlags()[2] ? this.count : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
