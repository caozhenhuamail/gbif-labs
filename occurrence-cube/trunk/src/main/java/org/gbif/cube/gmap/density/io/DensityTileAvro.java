/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.cube.gmap.density.io;  
@SuppressWarnings("all")
public class DensityTileAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DensityTileAvro\",\"namespace\":\"org.gbif.cube.gmap.density.io\",\"fields\":[{\"name\":\"clusterSize\",\"type\":\"int\"},{\"name\":\"cells\",\"type\":{\"type\":\"map\",\"values\":\"int\"}}]}");
  @Deprecated public int clusterSize;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Integer> cells;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clusterSize;
    case 1: return cells;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clusterSize = (java.lang.Integer)value$; break;
    case 1: cells = (java.util.Map<java.lang.CharSequence,java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'clusterSize' field.
   */
  public java.lang.Integer getClusterSize() {
    return clusterSize;
  }

  /**
   * Sets the value of the 'clusterSize' field.
   * @param value the value to set.
   */
  public void setClusterSize(java.lang.Integer value) {
    this.clusterSize = value;
  }

  /**
   * Gets the value of the 'cells' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Integer> getCells() {
    return cells;
  }

  /**
   * Sets the value of the 'cells' field.
   * @param value the value to set.
   */
  public void setCells(java.util.Map<java.lang.CharSequence,java.lang.Integer> value) {
    this.cells = value;
  }

  /** Creates a new DensityTileAvro RecordBuilder */
  public static org.gbif.cube.gmap.density.io.DensityTileAvro.Builder newBuilder() {
    return new org.gbif.cube.gmap.density.io.DensityTileAvro.Builder();
  }
  
  /** Creates a new DensityTileAvro RecordBuilder by copying an existing Builder */
  public static org.gbif.cube.gmap.density.io.DensityTileAvro.Builder newBuilder(org.gbif.cube.gmap.density.io.DensityTileAvro.Builder other) {
    return new org.gbif.cube.gmap.density.io.DensityTileAvro.Builder(other);
  }
  
  /** Creates a new DensityTileAvro RecordBuilder by copying an existing DensityTileAvro instance */
  public static org.gbif.cube.gmap.density.io.DensityTileAvro.Builder newBuilder(org.gbif.cube.gmap.density.io.DensityTileAvro other) {
    return new org.gbif.cube.gmap.density.io.DensityTileAvro.Builder(other);
  }
  
  /**
   * RecordBuilder for DensityTileAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DensityTileAvro>
    implements org.apache.avro.data.RecordBuilder<DensityTileAvro> {

    private int clusterSize;
    private java.util.Map<java.lang.CharSequence,java.lang.Integer> cells;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.cube.gmap.density.io.DensityTileAvro.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.cube.gmap.density.io.DensityTileAvro.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing DensityTileAvro instance */
    private Builder(org.gbif.cube.gmap.density.io.DensityTileAvro other) {
            super(org.gbif.cube.gmap.density.io.DensityTileAvro.SCHEMA$);
      if (isValidValue(fields()[0], other.clusterSize)) {
        this.clusterSize = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.clusterSize);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cells)) {
        this.cells = (java.util.Map<java.lang.CharSequence,java.lang.Integer>) data().deepCopy(fields()[1].schema(), other.cells);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'clusterSize' field */
    public java.lang.Integer getClusterSize() {
      return clusterSize;
    }
    
    /** Sets the value of the 'clusterSize' field */
    public org.gbif.cube.gmap.density.io.DensityTileAvro.Builder setClusterSize(int value) {
      validate(fields()[0], value);
      this.clusterSize = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'clusterSize' field has been set */
    public boolean hasClusterSize() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'clusterSize' field */
    public org.gbif.cube.gmap.density.io.DensityTileAvro.Builder clearClusterSize() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'cells' field */
    public java.util.Map<java.lang.CharSequence,java.lang.Integer> getCells() {
      return cells;
    }
    
    /** Sets the value of the 'cells' field */
    public org.gbif.cube.gmap.density.io.DensityTileAvro.Builder setCells(java.util.Map<java.lang.CharSequence,java.lang.Integer> value) {
      validate(fields()[1], value);
      this.cells = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'cells' field has been set */
    public boolean hasCells() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'cells' field */
    public org.gbif.cube.gmap.density.io.DensityTileAvro.Builder clearCells() {
      cells = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public DensityTileAvro build() {
      try {
        DensityTileAvro record = new DensityTileAvro();
        record.clusterSize = fieldSetFlags()[0] ? this.clusterSize : (java.lang.Integer) defaultValue(fields()[0]);
        record.cells = fieldSetFlags()[1] ? this.cells : (java.util.Map<java.lang.CharSequence,java.lang.Integer>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
