/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.cube.gmap.density.ops;  
@SuppressWarnings("all")
public class Pixel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Pixel\",\"namespace\":\"org.gbif.cube.gmap.density.model\",\"fields\":[{\"name\":\"x\",\"type\":\"int\"},{\"name\":\"y\",\"type\":\"int\"},{\"name\":\"count\",\"type\":\"int\"}]}");
  @Deprecated public int x;
  @Deprecated public int y;
  @Deprecated public int count;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return x;
    case 1: return y;
    case 2: return count;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: x = (java.lang.Integer)value$; break;
    case 1: y = (java.lang.Integer)value$; break;
    case 2: count = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'x' field.
   */
  public java.lang.Integer getX() {
    return x;
  }

  /**
   * Sets the value of the 'x' field.
   * @param value the value to set.
   */
  public void setX(java.lang.Integer value) {
    this.x = value;
  }

  /**
   * Gets the value of the 'y' field.
   */
  public java.lang.Integer getY() {
    return y;
  }

  /**
   * Sets the value of the 'y' field.
   * @param value the value to set.
   */
  public void setY(java.lang.Integer value) {
    this.y = value;
  }

  /**
   * Gets the value of the 'count' field.
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Integer value) {
    this.count = value;
  }

  /** Creates a new Pixel RecordBuilder */
  public static org.gbif.cube.gmap.density.ops.Pixel.Builder newBuilder() {
    return new org.gbif.cube.gmap.density.ops.Pixel.Builder();
  }
  
  /** Creates a new Pixel RecordBuilder by copying an existing Builder */
  public static org.gbif.cube.gmap.density.ops.Pixel.Builder newBuilder(org.gbif.cube.gmap.density.ops.Pixel.Builder other) {
    return new org.gbif.cube.gmap.density.ops.Pixel.Builder(other);
  }
  
  /** Creates a new Pixel RecordBuilder by copying an existing Pixel instance */
  public static org.gbif.cube.gmap.density.ops.Pixel.Builder newBuilder(org.gbif.cube.gmap.density.ops.Pixel other) {
    return new org.gbif.cube.gmap.density.ops.Pixel.Builder(other);
  }
  
  /**
   * RecordBuilder for Pixel instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Pixel>
    implements org.apache.avro.data.RecordBuilder<Pixel> {

    private int x;
    private int y;
    private int count;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.cube.gmap.density.ops.Pixel.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.cube.gmap.density.ops.Pixel.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Pixel instance */
    private Builder(org.gbif.cube.gmap.density.ops.Pixel other) {
            super(org.gbif.cube.gmap.density.ops.Pixel.SCHEMA$);
      if (isValidValue(fields()[0], other.x)) {
        this.x = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.x);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.y)) {
        this.y = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.y);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = (java.lang.Integer) data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'x' field */
    public java.lang.Integer getX() {
      return x;
    }
    
    /** Sets the value of the 'x' field */
    public org.gbif.cube.gmap.density.ops.Pixel.Builder setX(int value) {
      validate(fields()[0], value);
      this.x = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'x' field has been set */
    public boolean hasX() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'x' field */
    public org.gbif.cube.gmap.density.ops.Pixel.Builder clearX() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'y' field */
    public java.lang.Integer getY() {
      return y;
    }
    
    /** Sets the value of the 'y' field */
    public org.gbif.cube.gmap.density.ops.Pixel.Builder setY(int value) {
      validate(fields()[1], value);
      this.y = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'y' field has been set */
    public boolean hasY() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'y' field */
    public org.gbif.cube.gmap.density.ops.Pixel.Builder clearY() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'count' field */
    public java.lang.Integer getCount() {
      return count;
    }
    
    /** Sets the value of the 'count' field */
    public org.gbif.cube.gmap.density.ops.Pixel.Builder setCount(int value) {
      validate(fields()[2], value);
      this.count = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'count' field has been set */
    public boolean hasCount() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'count' field */
    public org.gbif.cube.gmap.density.ops.Pixel.Builder clearCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Pixel build() {
      try {
        Pixel record = new Pixel();
        record.x = fieldSetFlags()[0] ? this.x : (java.lang.Integer) defaultValue(fields()[0]);
        record.y = fieldSetFlags()[1] ? this.y : (java.lang.Integer) defaultValue(fields()[1]);
        record.count = fieldSetFlags()[2] ? this.count : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
