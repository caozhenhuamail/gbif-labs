/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.cube.gmap.density.io;  
@SuppressWarnings("all")
public class OccurrenceAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OccurrenceAvro\",\"namespace\":\"org.gbif.cube.gmap.density.io\",\"fields\":[{\"name\":\"kingdomID\",\"type\":\"int\"}]}");
  @Deprecated public int kingdomID;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return kingdomID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: kingdomID = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'kingdomID' field.
   */
  public java.lang.Integer getKingdomID() {
    return kingdomID;
  }

  /**
   * Sets the value of the 'kingdomID' field.
   * @param value the value to set.
   */
  public void setKingdomID(java.lang.Integer value) {
    this.kingdomID = value;
  }

  /** Creates a new OccurrenceAvro RecordBuilder */
  public static org.gbif.cube.gmap.density.io.OccurrenceAvro.Builder newBuilder() {
    return new org.gbif.cube.gmap.density.io.OccurrenceAvro.Builder();
  }
  
  /** Creates a new OccurrenceAvro RecordBuilder by copying an existing Builder */
  public static org.gbif.cube.gmap.density.io.OccurrenceAvro.Builder newBuilder(org.gbif.cube.gmap.density.io.OccurrenceAvro.Builder other) {
    return new org.gbif.cube.gmap.density.io.OccurrenceAvro.Builder(other);
  }
  
  /** Creates a new OccurrenceAvro RecordBuilder by copying an existing OccurrenceAvro instance */
  public static org.gbif.cube.gmap.density.io.OccurrenceAvro.Builder newBuilder(org.gbif.cube.gmap.density.io.OccurrenceAvro other) {
    return new org.gbif.cube.gmap.density.io.OccurrenceAvro.Builder(other);
  }
  
  /**
   * RecordBuilder for OccurrenceAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OccurrenceAvro>
    implements org.apache.avro.data.RecordBuilder<OccurrenceAvro> {

    private int kingdomID;

    /** Creates a new Builder */
    private Builder() {
      super(org.gbif.cube.gmap.density.io.OccurrenceAvro.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.gbif.cube.gmap.density.io.OccurrenceAvro.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing OccurrenceAvro instance */
    private Builder(org.gbif.cube.gmap.density.io.OccurrenceAvro other) {
            super(org.gbif.cube.gmap.density.io.OccurrenceAvro.SCHEMA$);
      if (isValidValue(fields()[0], other.kingdomID)) {
        this.kingdomID = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.kingdomID);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'kingdomID' field */
    public java.lang.Integer getKingdomID() {
      return kingdomID;
    }
    
    /** Sets the value of the 'kingdomID' field */
    public org.gbif.cube.gmap.density.io.OccurrenceAvro.Builder setKingdomID(int value) {
      validate(fields()[0], value);
      this.kingdomID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'kingdomID' field has been set */
    public boolean hasKingdomID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'kingdomID' field */
    public org.gbif.cube.gmap.density.io.OccurrenceAvro.Builder clearKingdomID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public OccurrenceAvro build() {
      try {
        OccurrenceAvro record = new OccurrenceAvro();
        record.kingdomID = fieldSetFlags()[0] ? this.kingdomID : (java.lang.Integer) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
